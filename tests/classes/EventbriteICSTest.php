<?php

ini_set('include_path', ini_get('include_path')
        . PATH_SEPARATOR
        . './'
        . PATH_SEPARATOR
        . '../'
        . PATH_SEPARATOR
        . '../../'
        . PATH_SEPARATOR
);

require_once 'classes/EventbriteICS.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-11-22 at 11:19:44.
 */
class EventbriteICSTest extends PHPUnit_Framework_TestCase {

    /**
     * @var EventbriteICS
     */
    protected $object;
    private $test_data;
    static private $messages = array();

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new EventbriteICS;
        $this->test_data = json_decode('');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        echo implode("\n", self::$messages);
        $this->object = null;
    }

    /**
     * @covers EventbriteICS::readEventbrite
     */
    public function testReadEventbrite() {
        // This is what the default is when there is no API key ...
        $startsWith = "BEGIN:VCALENDAR" . CRLF
                . "VERSION:2.0" . CRLF
                . "METHOD:PUBLISH" . CRLF
                . "PRODID:-//EventbriteICS//EventbriteCalendar//EN" . CRLF
                . "CALSCALE:GREGORIAN" . CRLF
                . "X-WR-CALNAME:PMI-SFBAC Eventbrite Calendar" . CRLF
                . "X-WR-TIMEZONE:America/Los_Angeles" . CRLF
                . "X-WR-CALDESC:This is the PMI-SFBAC Eventbrite Calendar" . CRLF
                . "BEGIN:VTIMEZONE" . CRLF
                . "TZID:America/Los_Angeles" . CRLF
                . "X-LIC-LOCATION:America/Los_Angeles" . CRLF
                . "BEGIN:DAYLIGHT" . CRLF
                . "TZOFFSETFROM:-0800" . CRLF
                . "TZOFFSETTO:-0700" . CRLF
                . "TZNAME:PDT" . CRLF
                . "DTSTART:19700308T020000" . CRLF
                . "RRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU" . CRLF
                . "END:DAYLIGHT" . CRLF
                . "BEGIN:STANDARD" . CRLF
                . "TZOFFSETFROM:-0700" . CRLF
                . "TZOFFSETTO:-0800" . CRLF
                . "TZNAME:PST" . CRLF
                . "DTSTART:19701101T020000" . CRLF
                . "RRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU" . CRLF
                . "END:STANDARD" . CRLF
                . "END:VTIMEZONE" . CRLF
                . "BEGIN:VEVENT" . CRLF
                // This should be the URL of the calendar
                . "URL;VALUE=URI:http://www.pmi-sfbac.org/" . CRLF
        ;

        $endsWith = "SUMMARY:No rows found" . CRLF
                . "END:VEVENT" . CRLF
                . "END:VCALENDAR";

        $result = $this->object->readEventbrite();
        $this->assertContains($startsWith, $result, 'Problem with iCal data');
        $this->assertContains($endsWith, $result, 'Problem with iCal data');
    }

    public function testReadEventbriteWithKey() {


        // Mock the Eventbrite object so we don't have to show our hand ...
        $this->object->setEventbrite(new MockEventbrite());
        $this->object->setBeginDate(strtotime("2012-11-01"));
        $this->object->setEndDate(strtotime("2013-01-01"));

        // FIXME - should probably do a regex instead of hardwiring all this
        //         stuff.
        //         
        //         Maybe do a mock for the API call as well, since we're not
        //         testing the Eventbrite object here.
        $expects = "BEGIN:VCALENDAR" . CRLF;
        $expects .= "VERSION:2.0" . CRLF;
        $expects .= "METHOD:PUBLISH" . CRLF;
        $expects .= "PRODID:-//EventbriteICS//EventbriteCalendar//EN" . CRLF;
        $expects .= "CALSCALE:GREGORIAN" . CRLF;
        $expects .= "X-WR-CALNAME:PMI-SFBAC Eventbrite Calendar" . CRLF;
        $expects .= "X-WR-TIMEZONE:America/Los_Angeles" . CRLF;
        $expects .= "X-WR-CALDESC:This is the PMI-SFBAC Eventbrite Calendar" . CRLF;
        $expects .= "BEGIN:VTIMEZONE" . CRLF;
        $expects .= "TZID:America/Los_Angeles" . CRLF;
        $expects .= "X-LIC-LOCATION:America/Los_Angeles" . CRLF;
        $expects .= "BEGIN:DAYLIGHT" . CRLF;
        $expects .= "TZOFFSETFROM:-0800" . CRLF;
        $expects .= "TZOFFSETTO:-0700" . CRLF;
        $expects .= "TZNAME:PDT" . CRLF;
        $expects .= "DTSTART:19700308T020000" . CRLF;
        $expects .= "RRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU" . CRLF;
        $expects .= "END:DAYLIGHT" . CRLF;
        $expects .= "BEGIN:STANDARD" . CRLF;
        $expects .= "TZOFFSETFROM:-0700" . CRLF;
        $expects .= "TZOFFSETTO:-0800" . CRLF;
        $expects .= "TZNAME:PST" . CRLF;
        $expects .= "DTSTART:19701101T020000" . CRLF;
        $expects .= "RRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU" . CRLF;
        $expects .= "END:STANDARD" . CRLF;
        $expects .= "END:VTIMEZONE" . CRLF;
        $expects .= "BEGIN:VEVENT" . CRLF;
        $expects .= "ORGANIZER;CN=PMI San Francisco Bay Area Chapter:MAILTO:eventbrite@pmi-sfbac.org" . CRLF;
        $expects .= "UID:908163459" . CRLF;
        $expects .= "URL:http://dev-win.eventbrite.com/event/1003" . CRLF;
        $expects .= "CATEGORIES:test" . CRLF;
        $expects .= "CLASS:Public" . CRLF;
        $expects .= "CREATED;TZID=US/Eastern:20121103T124706" . CRLF;
        $expects .= "DTSTART;TZID=US/Eastern:20121231T200000" . CRLF;
        $expects .= "DTEND;TZID=US/Eastern:20120101T060000" . CRLF;
        $expects .= "SUMMARY:Best NYC New Year's Party" . CRLF;
        // This gets wrapped because it it longer than the 75 character limit
        $expects .= "DESCRIPTION:Come spend New Year's Eve with us! http://dev-win.eventbrite.co" .
                "\n\tm/event/1003" . CRLF;
        $expects .= "X-ALT-DESC;FMTTYPE=text/html:Come spend New Year's Eve with us!"
                . '<p><a href="http://dev-win.eventbrite.com/event/1003" target="_blank">http://dev-win.eventbrite.com/event/1003</a></p>'
                . CRLF;
        $expects .= "LAST-MODIFIED;TZID=US/Eastern:20120109T101215" . CRLF;
        $expects .= "STATUS:draft" . CRLF;
        $expects .= "END:VEVENT" . CRLF;
        $expects .= "BEGIN:VEVENT" . CRLF;
        $expects .= "ORGANIZER;CN=PMI San Francisco Bay Area Chapter:MAILTO:eventbrite@pmi-sfbac.org" . CRLF;
        $expects .= "UID:888888" . CRLF;
        $expects .= "URL:http://dev-win.eventbrite.com/event/12345" . CRLF;
        $expects .= "CATEGORIES:test" . CRLF;
        $expects .= "CLASS:Public" . CRLF;
        $expects .= "CREATED;TZID=US/Eastern:20121103T124706" . CRLF;
        $expects .= "DTSTART;TZID=US/Eastern:20121231T200000" . CRLF;
        $expects .= "DTEND;TZID=US/Eastern:20120101T060000" . CRLF;
        $expects .= "SUMMARY:Best NYC New Year's Party" . CRLF;
        // This gets wrapped because it it longer than the 75 character limit
        $expects .= "DESCRIPTION:Come spend New Year's Eve with us! http://dev-win.eventbrite.co" .
                "\n\tm/event/12345" . CRLF;
        $expects .= "X-ALT-DESC;FMTTYPE=text/html:Come spend New Year's Eve with us!"
                . '<p><a href="http://dev-win.eventbrite.com/event/12345" target="_blank">http://dev-win.eventbrite.com/event/12345</a></p>'
                . CRLF;
        $expects .= "LAST-MODIFIED;TZID=US/Eastern:20120109T101215" . CRLF;
        $expects .= "STATUS:draft" . CRLF;
        
        
        $endsWith = "END:VEVENT" . CRLF;
        $endsWith .= "END:VCALENDAR";
        ;



        $result = $this->object->readEventbrite();
        self::$messages = array_merge(self::$messages, array(print_r($this->object->getEvents())));
        $this->assertContains($expects, $result, 'Problem with iCal data startsWith for PMI feed');
        $this->assertContains($endsWith, $result, 'Problem with iCal data endsWith for PMI feed');
    }

    /**
     * @covers EventbriteICS::sendICS
     * @todo   Implement testSendICS().
     */
    public function testSendICS() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}

class MockEventbrite {

    public function user_list_events() {
        $return = XmlToEvents::Parse("data/testEvent.xml");
        return $return;
    }

}

class XmlToEvents {

    public static function Parse($url) {

        $fileContents = file_get_contents($url, true);

        $fileContents = str_replace(array("\n", "\r", "\t"), '', $fileContents);

        $fileContents = trim(str_replace('"', "'", $fileContents));

        $simpleXml = simplexml_load_string($fileContents);

        $json = json_encode($simpleXml);

        return json_decode($json);
    }

}